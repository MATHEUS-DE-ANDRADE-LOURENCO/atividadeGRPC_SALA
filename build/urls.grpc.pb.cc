// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: urls.proto

#include "urls.pb.h"
#include "urls.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace encurtador {

static const char* EncurtadorURL_method_names[] = {
  "/encurtador.EncurtadorURL/EncurtarURL",
  "/encurtador.EncurtadorURL/ObterURLLonga",
};

std::unique_ptr< EncurtadorURL::Stub> EncurtadorURL::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EncurtadorURL::Stub> stub(new EncurtadorURL::Stub(channel, options));
  return stub;
}

EncurtadorURL::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EncurtarURL_(EncurtadorURL_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ObterURLLonga_(EncurtadorURL_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EncurtadorURL::Stub::EncurtarURL(::grpc::ClientContext* context, const ::encurtador::RequisicaoEncurtar& request, ::encurtador::RespostaEncurtar* response) {
  return ::grpc::internal::BlockingUnaryCall< ::encurtador::RequisicaoEncurtar, ::encurtador::RespostaEncurtar, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EncurtarURL_, context, request, response);
}

void EncurtadorURL::Stub::async::EncurtarURL(::grpc::ClientContext* context, const ::encurtador::RequisicaoEncurtar* request, ::encurtador::RespostaEncurtar* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::encurtador::RequisicaoEncurtar, ::encurtador::RespostaEncurtar, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncurtarURL_, context, request, response, std::move(f));
}

void EncurtadorURL::Stub::async::EncurtarURL(::grpc::ClientContext* context, const ::encurtador::RequisicaoEncurtar* request, ::encurtador::RespostaEncurtar* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncurtarURL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::encurtador::RespostaEncurtar>* EncurtadorURL::Stub::PrepareAsyncEncurtarURLRaw(::grpc::ClientContext* context, const ::encurtador::RequisicaoEncurtar& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::encurtador::RespostaEncurtar, ::encurtador::RequisicaoEncurtar, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EncurtarURL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::encurtador::RespostaEncurtar>* EncurtadorURL::Stub::AsyncEncurtarURLRaw(::grpc::ClientContext* context, const ::encurtador::RequisicaoEncurtar& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEncurtarURLRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EncurtadorURL::Stub::ObterURLLonga(::grpc::ClientContext* context, const ::encurtador::RequisicaoObter& request, ::encurtador::RespostaObter* response) {
  return ::grpc::internal::BlockingUnaryCall< ::encurtador::RequisicaoObter, ::encurtador::RespostaObter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ObterURLLonga_, context, request, response);
}

void EncurtadorURL::Stub::async::ObterURLLonga(::grpc::ClientContext* context, const ::encurtador::RequisicaoObter* request, ::encurtador::RespostaObter* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::encurtador::RequisicaoObter, ::encurtador::RespostaObter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ObterURLLonga_, context, request, response, std::move(f));
}

void EncurtadorURL::Stub::async::ObterURLLonga(::grpc::ClientContext* context, const ::encurtador::RequisicaoObter* request, ::encurtador::RespostaObter* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ObterURLLonga_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::encurtador::RespostaObter>* EncurtadorURL::Stub::PrepareAsyncObterURLLongaRaw(::grpc::ClientContext* context, const ::encurtador::RequisicaoObter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::encurtador::RespostaObter, ::encurtador::RequisicaoObter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ObterURLLonga_, context, request);
}

::grpc::ClientAsyncResponseReader< ::encurtador::RespostaObter>* EncurtadorURL::Stub::AsyncObterURLLongaRaw(::grpc::ClientContext* context, const ::encurtador::RequisicaoObter& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncObterURLLongaRaw(context, request, cq);
  result->StartCall();
  return result;
}

EncurtadorURL::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EncurtadorURL_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EncurtadorURL::Service, ::encurtador::RequisicaoEncurtar, ::encurtador::RespostaEncurtar, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EncurtadorURL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::encurtador::RequisicaoEncurtar* req,
             ::encurtador::RespostaEncurtar* resp) {
               return service->EncurtarURL(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EncurtadorURL_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EncurtadorURL::Service, ::encurtador::RequisicaoObter, ::encurtador::RespostaObter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EncurtadorURL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::encurtador::RequisicaoObter* req,
             ::encurtador::RespostaObter* resp) {
               return service->ObterURLLonga(ctx, req, resp);
             }, this)));
}

EncurtadorURL::Service::~Service() {
}

::grpc::Status EncurtadorURL::Service::EncurtarURL(::grpc::ServerContext* context, const ::encurtador::RequisicaoEncurtar* request, ::encurtador::RespostaEncurtar* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EncurtadorURL::Service::ObterURLLonga(::grpc::ServerContext* context, const ::encurtador::RequisicaoObter* request, ::encurtador::RespostaObter* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace encurtador

