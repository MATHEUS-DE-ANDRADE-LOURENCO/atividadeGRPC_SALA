// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: urls.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_urls_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_urls_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_urls_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_urls_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_urls_2eproto;
namespace encurtador {
class RequisicaoEncurtar;
struct RequisicaoEncurtarDefaultTypeInternal;
extern RequisicaoEncurtarDefaultTypeInternal _RequisicaoEncurtar_default_instance_;
class RequisicaoObter;
struct RequisicaoObterDefaultTypeInternal;
extern RequisicaoObterDefaultTypeInternal _RequisicaoObter_default_instance_;
class RespostaEncurtar;
struct RespostaEncurtarDefaultTypeInternal;
extern RespostaEncurtarDefaultTypeInternal _RespostaEncurtar_default_instance_;
class RespostaObter;
struct RespostaObterDefaultTypeInternal;
extern RespostaObterDefaultTypeInternal _RespostaObter_default_instance_;
}  // namespace encurtador
PROTOBUF_NAMESPACE_OPEN
template<> ::encurtador::RequisicaoEncurtar* Arena::CreateMaybeMessage<::encurtador::RequisicaoEncurtar>(Arena*);
template<> ::encurtador::RequisicaoObter* Arena::CreateMaybeMessage<::encurtador::RequisicaoObter>(Arena*);
template<> ::encurtador::RespostaEncurtar* Arena::CreateMaybeMessage<::encurtador::RespostaEncurtar>(Arena*);
template<> ::encurtador::RespostaObter* Arena::CreateMaybeMessage<::encurtador::RespostaObter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace encurtador {

// ===================================================================

class RequisicaoEncurtar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:encurtador.RequisicaoEncurtar) */ {
 public:
  inline RequisicaoEncurtar() : RequisicaoEncurtar(nullptr) {}
  ~RequisicaoEncurtar() override;
  explicit PROTOBUF_CONSTEXPR RequisicaoEncurtar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequisicaoEncurtar(const RequisicaoEncurtar& from);
  RequisicaoEncurtar(RequisicaoEncurtar&& from) noexcept
    : RequisicaoEncurtar() {
    *this = ::std::move(from);
  }

  inline RequisicaoEncurtar& operator=(const RequisicaoEncurtar& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequisicaoEncurtar& operator=(RequisicaoEncurtar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequisicaoEncurtar& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequisicaoEncurtar* internal_default_instance() {
    return reinterpret_cast<const RequisicaoEncurtar*>(
               &_RequisicaoEncurtar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequisicaoEncurtar& a, RequisicaoEncurtar& b) {
    a.Swap(&b);
  }
  inline void Swap(RequisicaoEncurtar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequisicaoEncurtar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequisicaoEncurtar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequisicaoEncurtar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequisicaoEncurtar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequisicaoEncurtar& from) {
    RequisicaoEncurtar::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequisicaoEncurtar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "encurtador.RequisicaoEncurtar";
  }
  protected:
  explicit RequisicaoEncurtar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlLongaFieldNumber = 1,
  };
  // string url_longa = 1;
  void clear_url_longa();
  const std::string& url_longa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_longa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_longa();
  PROTOBUF_NODISCARD std::string* release_url_longa();
  void set_allocated_url_longa(std::string* url_longa);
  private:
  const std::string& _internal_url_longa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_longa(const std::string& value);
  std::string* _internal_mutable_url_longa();
  public:

  // @@protoc_insertion_point(class_scope:encurtador.RequisicaoEncurtar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_longa_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_urls_2eproto;
};
// -------------------------------------------------------------------

class RespostaEncurtar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:encurtador.RespostaEncurtar) */ {
 public:
  inline RespostaEncurtar() : RespostaEncurtar(nullptr) {}
  ~RespostaEncurtar() override;
  explicit PROTOBUF_CONSTEXPR RespostaEncurtar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespostaEncurtar(const RespostaEncurtar& from);
  RespostaEncurtar(RespostaEncurtar&& from) noexcept
    : RespostaEncurtar() {
    *this = ::std::move(from);
  }

  inline RespostaEncurtar& operator=(const RespostaEncurtar& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespostaEncurtar& operator=(RespostaEncurtar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespostaEncurtar& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespostaEncurtar* internal_default_instance() {
    return reinterpret_cast<const RespostaEncurtar*>(
               &_RespostaEncurtar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RespostaEncurtar& a, RespostaEncurtar& b) {
    a.Swap(&b);
  }
  inline void Swap(RespostaEncurtar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespostaEncurtar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespostaEncurtar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespostaEncurtar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespostaEncurtar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RespostaEncurtar& from) {
    RespostaEncurtar::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespostaEncurtar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "encurtador.RespostaEncurtar";
  }
  protected:
  explicit RespostaEncurtar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlCurtaFieldNumber = 1,
    kCodigoFieldNumber = 2,
    kMsgFieldNumber = 4,
    kSucessoFieldNumber = 3,
  };
  // string url_curta = 1;
  void clear_url_curta();
  const std::string& url_curta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_curta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_curta();
  PROTOBUF_NODISCARD std::string* release_url_curta();
  void set_allocated_url_curta(std::string* url_curta);
  private:
  const std::string& _internal_url_curta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_curta(const std::string& value);
  std::string* _internal_mutable_url_curta();
  public:

  // string codigo = 2;
  void clear_codigo();
  const std::string& codigo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codigo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codigo();
  PROTOBUF_NODISCARD std::string* release_codigo();
  void set_allocated_codigo(std::string* codigo);
  private:
  const std::string& _internal_codigo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codigo(const std::string& value);
  std::string* _internal_mutable_codigo();
  public:

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool sucesso = 3;
  void clear_sucesso();
  bool sucesso() const;
  void set_sucesso(bool value);
  private:
  bool _internal_sucesso() const;
  void _internal_set_sucesso(bool value);
  public:

  // @@protoc_insertion_point(class_scope:encurtador.RespostaEncurtar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_curta_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codigo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    bool sucesso_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_urls_2eproto;
};
// -------------------------------------------------------------------

class RequisicaoObter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:encurtador.RequisicaoObter) */ {
 public:
  inline RequisicaoObter() : RequisicaoObter(nullptr) {}
  ~RequisicaoObter() override;
  explicit PROTOBUF_CONSTEXPR RequisicaoObter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequisicaoObter(const RequisicaoObter& from);
  RequisicaoObter(RequisicaoObter&& from) noexcept
    : RequisicaoObter() {
    *this = ::std::move(from);
  }

  inline RequisicaoObter& operator=(const RequisicaoObter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequisicaoObter& operator=(RequisicaoObter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequisicaoObter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequisicaoObter* internal_default_instance() {
    return reinterpret_cast<const RequisicaoObter*>(
               &_RequisicaoObter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequisicaoObter& a, RequisicaoObter& b) {
    a.Swap(&b);
  }
  inline void Swap(RequisicaoObter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequisicaoObter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequisicaoObter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequisicaoObter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequisicaoObter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequisicaoObter& from) {
    RequisicaoObter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequisicaoObter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "encurtador.RequisicaoObter";
  }
  protected:
  explicit RequisicaoObter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodigoFieldNumber = 1,
  };
  // string codigo = 1;
  void clear_codigo();
  const std::string& codigo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codigo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codigo();
  PROTOBUF_NODISCARD std::string* release_codigo();
  void set_allocated_codigo(std::string* codigo);
  private:
  const std::string& _internal_codigo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codigo(const std::string& value);
  std::string* _internal_mutable_codigo();
  public:

  // @@protoc_insertion_point(class_scope:encurtador.RequisicaoObter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codigo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_urls_2eproto;
};
// -------------------------------------------------------------------

class RespostaObter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:encurtador.RespostaObter) */ {
 public:
  inline RespostaObter() : RespostaObter(nullptr) {}
  ~RespostaObter() override;
  explicit PROTOBUF_CONSTEXPR RespostaObter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RespostaObter(const RespostaObter& from);
  RespostaObter(RespostaObter&& from) noexcept
    : RespostaObter() {
    *this = ::std::move(from);
  }

  inline RespostaObter& operator=(const RespostaObter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespostaObter& operator=(RespostaObter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespostaObter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespostaObter* internal_default_instance() {
    return reinterpret_cast<const RespostaObter*>(
               &_RespostaObter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RespostaObter& a, RespostaObter& b) {
    a.Swap(&b);
  }
  inline void Swap(RespostaObter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespostaObter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespostaObter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespostaObter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RespostaObter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RespostaObter& from) {
    RespostaObter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespostaObter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "encurtador.RespostaObter";
  }
  protected:
  explicit RespostaObter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlLongaFieldNumber = 1,
    kMsgFieldNumber = 3,
    kSucessoFieldNumber = 2,
  };
  // string url_longa = 1;
  void clear_url_longa();
  const std::string& url_longa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_longa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_longa();
  PROTOBUF_NODISCARD std::string* release_url_longa();
  void set_allocated_url_longa(std::string* url_longa);
  private:
  const std::string& _internal_url_longa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_longa(const std::string& value);
  std::string* _internal_mutable_url_longa();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool sucesso = 2;
  void clear_sucesso();
  bool sucesso() const;
  void set_sucesso(bool value);
  private:
  bool _internal_sucesso() const;
  void _internal_set_sucesso(bool value);
  public:

  // @@protoc_insertion_point(class_scope:encurtador.RespostaObter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_longa_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    bool sucesso_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_urls_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequisicaoEncurtar

// string url_longa = 1;
inline void RequisicaoEncurtar::clear_url_longa() {
  _impl_.url_longa_.ClearToEmpty();
}
inline const std::string& RequisicaoEncurtar::url_longa() const {
  // @@protoc_insertion_point(field_get:encurtador.RequisicaoEncurtar.url_longa)
  return _internal_url_longa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequisicaoEncurtar::set_url_longa(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_longa_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:encurtador.RequisicaoEncurtar.url_longa)
}
inline std::string* RequisicaoEncurtar::mutable_url_longa() {
  std::string* _s = _internal_mutable_url_longa();
  // @@protoc_insertion_point(field_mutable:encurtador.RequisicaoEncurtar.url_longa)
  return _s;
}
inline const std::string& RequisicaoEncurtar::_internal_url_longa() const {
  return _impl_.url_longa_.Get();
}
inline void RequisicaoEncurtar::_internal_set_url_longa(const std::string& value) {
  
  _impl_.url_longa_.Set(value, GetArenaForAllocation());
}
inline std::string* RequisicaoEncurtar::_internal_mutable_url_longa() {
  
  return _impl_.url_longa_.Mutable(GetArenaForAllocation());
}
inline std::string* RequisicaoEncurtar::release_url_longa() {
  // @@protoc_insertion_point(field_release:encurtador.RequisicaoEncurtar.url_longa)
  return _impl_.url_longa_.Release();
}
inline void RequisicaoEncurtar::set_allocated_url_longa(std::string* url_longa) {
  if (url_longa != nullptr) {
    
  } else {
    
  }
  _impl_.url_longa_.SetAllocated(url_longa, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_longa_.IsDefault()) {
    _impl_.url_longa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:encurtador.RequisicaoEncurtar.url_longa)
}

// -------------------------------------------------------------------

// RespostaEncurtar

// string url_curta = 1;
inline void RespostaEncurtar::clear_url_curta() {
  _impl_.url_curta_.ClearToEmpty();
}
inline const std::string& RespostaEncurtar::url_curta() const {
  // @@protoc_insertion_point(field_get:encurtador.RespostaEncurtar.url_curta)
  return _internal_url_curta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespostaEncurtar::set_url_curta(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_curta_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:encurtador.RespostaEncurtar.url_curta)
}
inline std::string* RespostaEncurtar::mutable_url_curta() {
  std::string* _s = _internal_mutable_url_curta();
  // @@protoc_insertion_point(field_mutable:encurtador.RespostaEncurtar.url_curta)
  return _s;
}
inline const std::string& RespostaEncurtar::_internal_url_curta() const {
  return _impl_.url_curta_.Get();
}
inline void RespostaEncurtar::_internal_set_url_curta(const std::string& value) {
  
  _impl_.url_curta_.Set(value, GetArenaForAllocation());
}
inline std::string* RespostaEncurtar::_internal_mutable_url_curta() {
  
  return _impl_.url_curta_.Mutable(GetArenaForAllocation());
}
inline std::string* RespostaEncurtar::release_url_curta() {
  // @@protoc_insertion_point(field_release:encurtador.RespostaEncurtar.url_curta)
  return _impl_.url_curta_.Release();
}
inline void RespostaEncurtar::set_allocated_url_curta(std::string* url_curta) {
  if (url_curta != nullptr) {
    
  } else {
    
  }
  _impl_.url_curta_.SetAllocated(url_curta, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_curta_.IsDefault()) {
    _impl_.url_curta_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:encurtador.RespostaEncurtar.url_curta)
}

// string codigo = 2;
inline void RespostaEncurtar::clear_codigo() {
  _impl_.codigo_.ClearToEmpty();
}
inline const std::string& RespostaEncurtar::codigo() const {
  // @@protoc_insertion_point(field_get:encurtador.RespostaEncurtar.codigo)
  return _internal_codigo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespostaEncurtar::set_codigo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.codigo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:encurtador.RespostaEncurtar.codigo)
}
inline std::string* RespostaEncurtar::mutable_codigo() {
  std::string* _s = _internal_mutable_codigo();
  // @@protoc_insertion_point(field_mutable:encurtador.RespostaEncurtar.codigo)
  return _s;
}
inline const std::string& RespostaEncurtar::_internal_codigo() const {
  return _impl_.codigo_.Get();
}
inline void RespostaEncurtar::_internal_set_codigo(const std::string& value) {
  
  _impl_.codigo_.Set(value, GetArenaForAllocation());
}
inline std::string* RespostaEncurtar::_internal_mutable_codigo() {
  
  return _impl_.codigo_.Mutable(GetArenaForAllocation());
}
inline std::string* RespostaEncurtar::release_codigo() {
  // @@protoc_insertion_point(field_release:encurtador.RespostaEncurtar.codigo)
  return _impl_.codigo_.Release();
}
inline void RespostaEncurtar::set_allocated_codigo(std::string* codigo) {
  if (codigo != nullptr) {
    
  } else {
    
  }
  _impl_.codigo_.SetAllocated(codigo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.codigo_.IsDefault()) {
    _impl_.codigo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:encurtador.RespostaEncurtar.codigo)
}

// bool sucesso = 3;
inline void RespostaEncurtar::clear_sucesso() {
  _impl_.sucesso_ = false;
}
inline bool RespostaEncurtar::_internal_sucesso() const {
  return _impl_.sucesso_;
}
inline bool RespostaEncurtar::sucesso() const {
  // @@protoc_insertion_point(field_get:encurtador.RespostaEncurtar.sucesso)
  return _internal_sucesso();
}
inline void RespostaEncurtar::_internal_set_sucesso(bool value) {
  
  _impl_.sucesso_ = value;
}
inline void RespostaEncurtar::set_sucesso(bool value) {
  _internal_set_sucesso(value);
  // @@protoc_insertion_point(field_set:encurtador.RespostaEncurtar.sucesso)
}

// string msg = 4;
inline void RespostaEncurtar::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& RespostaEncurtar::msg() const {
  // @@protoc_insertion_point(field_get:encurtador.RespostaEncurtar.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespostaEncurtar::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:encurtador.RespostaEncurtar.msg)
}
inline std::string* RespostaEncurtar::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:encurtador.RespostaEncurtar.msg)
  return _s;
}
inline const std::string& RespostaEncurtar::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void RespostaEncurtar::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* RespostaEncurtar::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* RespostaEncurtar::release_msg() {
  // @@protoc_insertion_point(field_release:encurtador.RespostaEncurtar.msg)
  return _impl_.msg_.Release();
}
inline void RespostaEncurtar::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:encurtador.RespostaEncurtar.msg)
}

// -------------------------------------------------------------------

// RequisicaoObter

// string codigo = 1;
inline void RequisicaoObter::clear_codigo() {
  _impl_.codigo_.ClearToEmpty();
}
inline const std::string& RequisicaoObter::codigo() const {
  // @@protoc_insertion_point(field_get:encurtador.RequisicaoObter.codigo)
  return _internal_codigo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequisicaoObter::set_codigo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.codigo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:encurtador.RequisicaoObter.codigo)
}
inline std::string* RequisicaoObter::mutable_codigo() {
  std::string* _s = _internal_mutable_codigo();
  // @@protoc_insertion_point(field_mutable:encurtador.RequisicaoObter.codigo)
  return _s;
}
inline const std::string& RequisicaoObter::_internal_codigo() const {
  return _impl_.codigo_.Get();
}
inline void RequisicaoObter::_internal_set_codigo(const std::string& value) {
  
  _impl_.codigo_.Set(value, GetArenaForAllocation());
}
inline std::string* RequisicaoObter::_internal_mutable_codigo() {
  
  return _impl_.codigo_.Mutable(GetArenaForAllocation());
}
inline std::string* RequisicaoObter::release_codigo() {
  // @@protoc_insertion_point(field_release:encurtador.RequisicaoObter.codigo)
  return _impl_.codigo_.Release();
}
inline void RequisicaoObter::set_allocated_codigo(std::string* codigo) {
  if (codigo != nullptr) {
    
  } else {
    
  }
  _impl_.codigo_.SetAllocated(codigo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.codigo_.IsDefault()) {
    _impl_.codigo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:encurtador.RequisicaoObter.codigo)
}

// -------------------------------------------------------------------

// RespostaObter

// string url_longa = 1;
inline void RespostaObter::clear_url_longa() {
  _impl_.url_longa_.ClearToEmpty();
}
inline const std::string& RespostaObter::url_longa() const {
  // @@protoc_insertion_point(field_get:encurtador.RespostaObter.url_longa)
  return _internal_url_longa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespostaObter::set_url_longa(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_longa_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:encurtador.RespostaObter.url_longa)
}
inline std::string* RespostaObter::mutable_url_longa() {
  std::string* _s = _internal_mutable_url_longa();
  // @@protoc_insertion_point(field_mutable:encurtador.RespostaObter.url_longa)
  return _s;
}
inline const std::string& RespostaObter::_internal_url_longa() const {
  return _impl_.url_longa_.Get();
}
inline void RespostaObter::_internal_set_url_longa(const std::string& value) {
  
  _impl_.url_longa_.Set(value, GetArenaForAllocation());
}
inline std::string* RespostaObter::_internal_mutable_url_longa() {
  
  return _impl_.url_longa_.Mutable(GetArenaForAllocation());
}
inline std::string* RespostaObter::release_url_longa() {
  // @@protoc_insertion_point(field_release:encurtador.RespostaObter.url_longa)
  return _impl_.url_longa_.Release();
}
inline void RespostaObter::set_allocated_url_longa(std::string* url_longa) {
  if (url_longa != nullptr) {
    
  } else {
    
  }
  _impl_.url_longa_.SetAllocated(url_longa, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_longa_.IsDefault()) {
    _impl_.url_longa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:encurtador.RespostaObter.url_longa)
}

// bool sucesso = 2;
inline void RespostaObter::clear_sucesso() {
  _impl_.sucesso_ = false;
}
inline bool RespostaObter::_internal_sucesso() const {
  return _impl_.sucesso_;
}
inline bool RespostaObter::sucesso() const {
  // @@protoc_insertion_point(field_get:encurtador.RespostaObter.sucesso)
  return _internal_sucesso();
}
inline void RespostaObter::_internal_set_sucesso(bool value) {
  
  _impl_.sucesso_ = value;
}
inline void RespostaObter::set_sucesso(bool value) {
  _internal_set_sucesso(value);
  // @@protoc_insertion_point(field_set:encurtador.RespostaObter.sucesso)
}

// string msg = 3;
inline void RespostaObter::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& RespostaObter::msg() const {
  // @@protoc_insertion_point(field_get:encurtador.RespostaObter.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RespostaObter::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:encurtador.RespostaObter.msg)
}
inline std::string* RespostaObter::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:encurtador.RespostaObter.msg)
  return _s;
}
inline const std::string& RespostaObter::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void RespostaObter::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* RespostaObter::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* RespostaObter::release_msg() {
  // @@protoc_insertion_point(field_release:encurtador.RespostaObter.msg)
  return _impl_.msg_.Release();
}
inline void RespostaObter::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:encurtador.RespostaObter.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace encurtador

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_urls_2eproto
